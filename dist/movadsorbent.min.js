class Movadsorbent { lastStop = { left: 0, bottom: 0 }; nowStop = { left: 0, bottom: 0 }; constructor(t, e = null) { this.player = t, this.event = e, this.initPlayerStyle(), this.initController(), this.initNote(), this.initPlayerEvent() } initPlayerStyle() { document.querySelector(".aplayer-body").style.transition = "none", document.querySelector(".aplayer-list").style.border = "none" } initController() { let t = document.querySelector(".aplayer-miniswitcher"), e = t.parentNode || t.parentElement; e.removeChild(t), t = document.createElement("div"), t.className = "aplayer-miniswitcher", e = e.appendChild(t), this.initPlayerMove(t), t = document.createElement("div"), t.className = "ctrl-bar", e.appendChild(t), this.initMinimizeButton(t), this.initMaximizeButton(t), this.initCloseButton(t) } initMinimizeButton(t) { let e = document.createElement("span"); e.className = "ctrl-btn minimize", t.appendChild(e), e.addEventListener("click", function (t) { t.stopPropagation(), this.minimizePlayer() }.bind(this)) } initMaximizeButton(t) { let e = document.createElement("span"); e.className = "ctrl-btn maximize", t.appendChild(e), e.addEventListener("click", function (t) { t.stopPropagation(), this.maximizePlayer(t) }.bind(this)) } initCloseButton(t) { let e = document.createElement("span"); e.className = "ctrl-btn close", t.appendChild(e), e.addEventListener("click", function (t) { t.stopPropagation(), this.player.destroy() }.bind(this)) } initPlayerMove(t) { let e = document.createElement("div"); e.className = "move-box", t.appendChild(e), e.addEventListener("mousedown", function () { document.body.style.cursor = "move", window.onmousemove = function (t) { this.movePlayer(t) }.bind(this), window.onmouseup = function (t) { document.body.style.cursor = "default", this.playerStop(t), this.noteShowHidden(), window.onmousemove = window.onmouseup = void 0 }.bind(this) }.bind(this)) } initPlayerEvent() { this.player.on("listshow", function () { setTimeout(function () { this.playerStop() }.bind(this), 500) }.bind(this)), this.player.on("play", function () { this.noteShowHidden() }.bind(this)), this.player.on("pause", function () { this.noteShowHidden() }.bind(this)) } movePlayer(t) { let e = document.querySelector(".aplayer-fixed"), o = document.querySelector(".aplayer-body"), i = Math.max(66, o.clientWidth) + 18, n = Math.max(66, e.clientHeight) >> 1; this.event = t || window.event || this.event; let l = this.event.clientX - i, s = document.body.clientHeight - this.event.clientY - n; this.nowStop.left = l, this.nowStop.bottom = s, e.style.left = o.style.left = l + "px", e.style.bottom = o.style.bottom = s + "px" } playerStop(t) { let e = document.querySelector(".aplayer-fixed"), o = document.querySelector(".aplayer-body"), i = Math.max(66, o.clientWidth) + 18, n = Math.max(66, e.clientHeight), l = null; this.nowStop.bottom < 16 ? l = "0" : this.nowStop.bottom + n + 16 > document.body.clientHeight && (l = document.body.clientHeight - n), l && (e.style.bottom = o.style.bottom = l + "px"); let s = null; this.nowStop.left < 16 ? s = "0" : this.nowStop.left + i + 36 > document.body.clientWidth && (s = (document.body.clientWidth << 1) - window.innerWidth - i + 18), s && (e.style.left = o.style.left = s + "px"), (l || s) && (this.event = t || window.event || this.event, this.nowStop.left = this.lastStop.left = s || this.event.clientX - i, this.nowStop.bottom = this.lastStop.bottom = l || document.body.clientHeight - this.event.clientY - n) } minimizePlayer() { if (this.setPlayerMode("mini"), this.nowStop.left + "" == "0" && this.nowStop.bottom + "" == "0") return; let t = document.querySelector(".aplayer-fixed"), e = document.querySelector(".aplayer-body"); t.style.background = "none", e.style.transition = "all .5s ease", t.style.left = e.style.left = "0px", t.style.bottom = e.style.bottom = "0px", this.lastStop = { ...this.nowStop }, this.nowStop.left = this.nowStop.bottom = 0, setTimeout(function () { e.style.transition = "none", this.noteShowHidden() }.bind(this), 500) } maximizePlayer(t) { this.setPlayerMode("mini" === this.player.mode ? "normal" : "mini"); let e = document.querySelector(".aplayer-fixed"), o = document.querySelector(".aplayer-body"); o.style.transition = "all .5s ease", e.style.background = "#fff", this.nowStop.left + "" == "0" && this.nowStop.bottom + "" == "0" && (e.style.left = o.style.left = this.lastStop.left + "px", e.style.bottom = o.style.bottom = this.lastStop.bottom + "px", this.nowStop = { ...this.lastStop }), setTimeout(function () { o.style.transition = "none", this.noteShowHidden(), this.playerStop(t) }.bind(this), 500) } initNote() { let t = document.createElement("div"); t.className = "note-container", this.player.container.parentNode.appendChild(t); let e = this.nowStop.left > document.body.clientWidth >> 1 ? "note-move-right" : "note-move-left"; for (let o = 1; o < 4; o++) { let i = document.createElement("div"); i.id = "note" + o, i.className = "note", i.innerHTML = '<svg class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="32" height="32"><path d="M1023.962 64.037c0-43.42-42.2-74.019-83.199-61.019L300.795 192.015c-26.6 8.4-44.8 33-44.8 60.999v522.83c-20.1-4.76-41.439-7.84-63.998-7.84C85.958 768.005 0 825.305 0 896.003S85.958 1024 191.997 1024s191.996-57.299 191.996-127.998V428.631l511.991-150.038v369.254c-20.1-4.76-41.44-7.84-63.999-7.84-106.038 0-191.996 57.299-191.996 127.998s85.958 127.997 191.996 127.997 191.997-57.299 191.997-127.997l-.02-703.968z"/></svg>', i.querySelector("svg path").style.fill = this.randomRGBColor(), i.style.animationName = e + o, t.appendChild(i) } document.querySelector(".aplayer-pic").appendChild(t) } noteShowHidden() { let t = document.querySelector(".note-container"); if (t) { t.className = this.player.audio.paused ? "note-container" : "note-container playing"; let e = this.nowStop.left > document.body.clientWidth >> 1 ? "note-move-right" : "note-move-left"; for (let t = 1; t < 4; t++) { let o = document.getElementById("note" + t); o.style.animationName = e + t, this.player.audio.paused || (o.querySelector("svg path").style.fill = this.randomRGBColor()) } } else this.initNote(), this.player.audio.paused || (document.querySelector(".note-container").className = "note-container playing") } setPlayerMode(t = "normal") { let e = document.querySelector(".aplayer-list"), o = e.querySelector("ol"); if (e.style.display = "block", "normal" === t) { let t = this.player.options.listMaxHeight; e.style.maxHeight = t || "250px", o.style.maxHeight = t || "250px" } else e.style.maxHeight = "0px", o.style.maxHeight = "0px"; this.player.setMode(t) } randomRGBColor() { return "rgb(" + Math.round(236 * Math.random()) + "," + Math.round(236 * Math.random()) + "," + Math.round(236 * Math.random()) + ")" } }